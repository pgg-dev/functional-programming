// 일급함수
// 함수를 값으로 다룰 수 있는 것
const f1 = function (a) { return a * a }
console.log(f1); // f1 함수 출력

// 함수를 인자로 받을 수 있다
const f3 = (f) => {
    return f();
}
// 함수를 인자로 받아서 함수 내부에서 함수를 평가 한 후 그 결과를 리턴한다.

console.log(f3(() => 10)) // 10
console.log(f3(() => 20)) //20

// 일급함수와 순수함수의 특징을 이용해 함수의 조합성을 높이는 것이 함수형 프로그래밍
// 언제 평가해도 상관없는 순수함수들을 만들고
// 그 순수함수들을 값으로 들고다니면서 필요한 시점마다 평가를 하는 방식이 함수형 프로그래밍


// 클로저와 일급함수가 사용 된 예제
const add_maker = (a) => {
    return (b) => { // a를 기억하는 클로저, 순수함수
        return a + b;
    }
}

// 익명 함수 내부에서만 a를 사용하고, a의 상태를 직접변경하지 않기 때문에 순수함수

const add10 = add_maker(10);
const add5 = add_maker(5);
// 익명함수를 값으로 리턴함
// 변수에 함수가 들어갈 수 있다 => 일급함수
// 함수를 값으로 다뤄서 함수를 리턴할 수 있다 => 일급함수
// 어느시점에 add10 또는 add5 익명함수는 호출되어도 항상 같은 값 리턴 => 순수함수
console.log(add10(20)); / /30
console.log(add5(10)); // 15

const f4 = (f1, f2, f3) => {
    return f3(f1() + f2());
}
console.log(f4(() => 2, () => 1, (a) => a * a)); // 9

// 순수함수로 평가시점을 다루게되면 유리해지는 것은
// 비동기가 일어나는 시점이나 동시성이 필요한 시점에서
// 함수를 실행시키는 시점까지 값으로 다루다가 원하는 시점에 평가를 할수도있고
// 반복문안에서 원하는 시점에 함수를 실행시킬수있다